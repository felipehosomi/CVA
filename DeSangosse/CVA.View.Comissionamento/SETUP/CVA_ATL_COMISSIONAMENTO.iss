; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include <idp.iss>
#define MyAppName "SAP AddOn Comissionamento"
#define MyAppVersion "1.0.0.9"
#define MyAppPublisher "CVA"
#define MyAppURL "http://www.cvaconsultoria.com.br"
#define MyAppExeName "CVA.View.Comissionamento.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C17E2E86-A325-460A-809E-600558DDA10D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultAddOnDir}
DisableDirPage=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=CVA.View.Comissionamento.Setup
Compression=lzma
SolidCompression=yes
ShowLanguageDialog=no
AllowNoIcons=yes
WizardImageFile="logo1.bmp"
WizardImageStretch=yes
WizardSmallImageFile="logo2.bmp"
LicenseFile=License.rtf
SetupLogging=yes
Uninstallable=yes

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[LangOptions]
LanguageName=Brazilian Portuguese
LanguageID=$0416
LanguageCodePage=0
DialogFontName=Arial
DialogFontSize=8
WelcomeFontName=Verdana
WelcomeFontSize=12
TitleFontName=Arial
TitleFontSize=29
CopyrightFontName=Arial
CopyrightFontSize=8
RightToLeft=no

[Files]
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\SETUP\MEF\AddOnInstallAPI.dll"; Flags: dontcopy
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\SETUP\MEF\ISSkin.dll"; DestDir: {app}; Flags: dontcopy
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\SETUP\MEF\Vista.cjstyles"; DestDir: {tmp}; Flags: dontcopy
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\CVA.View.Comissionamento\bin\x86\Debug\CVA.View.Comissionamento.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\CVA.View.Comissionamento\bin\x86\Debug\CVA.View.Comissionamento.exe.config"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall: DeploySQL()
Source: "C:\Source\DeSangosse\CVA.View.Comissionamento\CVA.View.Comissionamento\bin\x86\Debug\Files\*"; DestDir: "{app}\Files"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[UninstallDelete]
Type: filesandordirs; Name: "{app}\*.*"

[CustomMessages]
CustomForm_Caption=Conectar ao servidor de banco de dados
CustomForm_Description=Entre com a informação necessária
CustomForm_lblServer_Caption0=Servidor:
CustomForm_lblAuthType_Caption0=Log-in
CustomForm_lblUser_Caption0=Usuário:
CustomForm_lblPassword_Caption0=Senha:
CustomForm_lblDatabase_Caption0=Banco:
CustomForm_lblVersion_Caption0=Versão:
CustomForm_chkSQLAuth_Caption0=Usar Autenticação do SQL
CustomForm_chkWindowsAuth_Caption0=Usar Autenticação do Windows
CustomForm_lstVersion_Line0=MS-SQL Server 2008 R2
CustomForm_lstVersion_Line1=MS-SQL Server 2012
CustomForm_lstVersion_Line2=MS-SQL Server 2014

[Code]
const
	ADDON_ID = 'SAP AddOn Comissionamento';
	PARTNER_ID = 'CVA';       
	adCmdUnspecified = $FFFFFFFF;
	adCmdUnknown = $00000008;
	adCmdText = $00000001;
	adCmdTable = $00000002;
	adCmdStoredProc = $00000004;
	adCmdFile = $00000100;
	adCmdTableDirect = $00000200;
	adOptionUnspecified = $FFFFFFFF;
	adAsyncExecute = $00000010;
	adAsyncFetch = $00000020;
	adAsyncFetchNonBlocking = $00000040;
	adExecuteNoRecords = $00000080;
	adExecuteStream = $00000400;
	adExecuteRecord = $00000800;
	ConfigEndpointPath = '//configuration/connectionStrings/add';
	
var
	lblVersion: TLabel;
	lstVersion: TComboBox;
	lblServer: TLabel;
	lblAuthType: TLabel;
	lblUser: TLabel;
	lblPassword: TLabel;
	lblDatabase: TLabel;
	chkSQLAuth: TRadioButton;
	txtServer: TEdit;
	chkWindowsAuth: TRadioButton;
	txtUsername: TEdit;
	txtPassword: TPasswordEdit;
	lstDatabase: TComboBox;
	bIsNextEnabled: Boolean; 
	Page: TWizardPage;
	
procedure LoadSkin(lpszPath: String; lpszIniFileName: String); external 'LoadSkin@files:isskin.dll stdcall';
procedure UnloadSkin(); external 'UnloadSkin@files:isskin.dll stdcall';
function ShowWindow(hWnd: Integer; uType: Integer): Integer; external 'ShowWindow@user32.dll stdcall';
procedure ExitProcess(exitCode:integer); external 'ExitProcess@kernel32.dll stdcall';
function SetAddOnFolder(path: string): integer; external 'SetAddOnFolder@files:AddOnInstallAPI.dll stdcall';
function EndInstallEx(path: string; succeed: boolean): integer; external 'EndInstallEx@files:AddOnInstallAPI.dll stdcall';
function EndUninstall(path: string; succeed: boolean): integer; external 'EndUninstall@files:AddOnInstallAPI.dll stdcall';

procedure VersionOnChange (Sender: TObject);
begin
  lblServer.Enabled := True;
	txtServer.Enabled := True;
end;

procedure ServerOnChange (Sender: TObject);
begin
	lstDatabase.Items.Clear;
	lstDatabase.Text := '';
	bIsNextEnabled := False;
	WizardForm.NextButton.Enabled := bIsNextEnabled;

	if Length(txtServer.Text) > 0 then
	begin
		lblAuthType.Enabled := True;
		lblDatabase.Enabled := True;
		lstDatabase.Enabled := True;
		chkWindowsAuth.Enabled := True;
		chkSQLAuth.Enabled := True;
	end
	else
	begin
		lblAuthType.Enabled := False;
		lblDatabase.Enabled := False;
		lstDatabase.Enabled := False; 
		chkWindowsAuth.Enabled := False;
		chkSQLAuth.Enabled := False;
	end
end;

procedure  AuthOnChange (Sender: TObject);
begin
	if chkSQLAuth.Checked then
	begin
		lblUser.Enabled := true;
		lblPassword.Enabled := true;
		txtUsername.Enabled := true;
		txtPassword.Enabled := true;
	end
	else
	begin
		lblUser.Enabled := false;
		lblPassword.Enabled := false;
		txtUsername.Enabled := false;
		txtPassword.Enabled := false;
	end
end;

Procedure DatabaseOnChange (Sender: TObject);
begin
	if (Length(lstDatabase.Text) > 0) and (lstDatabase.Enabled) then
	begin
		bIsNextEnabled := True;
		WizardForm.NextButton.Enabled := bIsNextEnabled;  
	end
	else
	begin
		bIsNextEnabled := False;
		WizardForm.NextButton.Enabled := bIsNextEnabled;  
	end
end;

procedure RetrieveDatabaseList(Sender: TObject);
var  
	ADOCommand: Variant;
	ADORecordset: Variant;
	ADOConnection: Variant;  
begin
	lstDatabase.Items.Clear;

	try
		ADOConnection := CreateOleObject('ADODB.Connection');
		ADOConnection.ConnectionString := 
			'Provider=SQLOLEDB;' +
			'Data Source=' + txtServer.Text + ';' +
			'Application Name=' + '{#SetupSetting("AppName")}' + ' DB List;'
		if chkWindowsAuth.Checked then
			ADOConnection.ConnectionString := ADOConnection.ConnectionString +
				'Integrated Security=SSPI;'
	else
		ADOConnection.ConnectionString := ADOConnection.ConnectionString +
			'User Id=' + txtUsername.Text + ';' +
			'Password=' + txtPassword.Text + ';';
			ADOConnection.Open;
			
	try
		ADOCommand := CreateOleObject('ADODB.Command');
		ADOCommand.ActiveConnection := ADOConnection;
		ADOCommand.CommandText := 'SELECT name FROM master.dbo.sysdatabases WHERE HAS_DBACCESS(name) = 1 ORDER BY name';
		ADOCommand.CommandType := adCmdText;
		ADORecordset := ADOCommand.Execute;
		
		while not ADORecordset.eof do 
		begin
			lstDatabase.Items.Add(ADORecordset.Fields(0));
			ADORecordset.MoveNext;
		end      
	finally
		ADOConnection.Close;
	end;
	except
		MsgBox(GetExceptionMessage, mbError, MB_OK);
	end;
end;

function Framework45IsNotInstalled() : Boolean;
var
	bSuccess: Boolean;
	regVersion: Cardinal;
begin
	Result := True;
	bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
	if (True = bSuccess) and (regVersion >= 379893) then begin
		Result := False;
	end;
end;

function LoadScriptFromFile(const FileName: string; out CommandList: TStrings): Integer;
var
	I: Integer;
	SQLCommand: string;
	ScriptFile: TStringList;
begin
	Result := 0;
	ScriptFile := TStringList.Create;
	
	try
		SQLCommand := '';
		ScriptFile.LoadFromFile(FileName);
		
		for I := 0 to ScriptFile.Count - 1 do
		begin
			if Pos('go', LowerCase(Trim(ScriptFile[I]))) = 1 then
			begin
				Result := Result + 1;
				CommandList.Add(SQLCommand);
				SQLCommand := '';
			end
			else
				SQLCommand := SQLCommand + ScriptFile[I] + #13#10;
		end;
		
		CommandList.Add(SQLCommand);
		Result := Result + 1;
	finally
		ScriptFile.Free;
	end;
end;

procedure ChangeConnectionString(ConnectionString: string);
var
	XMLDoc, NewNode, RootNode, Nodes, Node: Variant;
	ConfigFilename, Key: String;
	i: integer;
begin
	ConfigFilename := ExpandConstant('{app}') + '\CVA.View.Comissionamento.exe.config';
	try
		XMLDoc := CreateOleObject('MSXML2.DOMDocument');
	except
		RaiseException('MSXML is required to complete the post-installation process.'#13#13'(Error ''' + GetExceptionMessage + ''' ocurred)');
	end;
	
	XMLDoc.async := False;
  XMLDoc.resolveExternals := False;
  XMLDoc.load(ConfigFilename);
  if XMLDoc.parseError.errorCode <> 0 then
    RaiseException('Error on line ' + IntToStr(XMLDoc.parseError.line) + ', position ' + IntToStr(XMLDoc.parseError.linepos) + ': ' + XMLDoc.parseError.reason);

  RootNode := XMLDoc.documentElement;
  Nodes := RootNode.selectNodes('//configuration/connectionStrings/add');
  for i := 0 to Nodes.length - 1 do
  begin
    Node := Nodes.Item[i];
		if Node.NodeType = 1 then
    begin
      key := Node.getAttribute('name');
			Case key of
        'db' : Node.setAttribute('connectionString', ConnectionString);
      end;
    end;
  end;

  XMLDoc.Save(ConfigFilename);
end;

procedure DeploySQL();
var  
	ADOConnection: Variant;
	UnicodeStr: string;
	ANSIStr: AnsiString;
	I: Integer;
	ConnectionString: string; 
begin
	try
		ADOConnection := CreateOleObject('ADODB.Connection');
		ADOConnection.ConnectionString := 
			'Provider=SQLOLEDB;' +
			'Data Source=' + txtServer.Text + ';' +
			'Initial Catalog=' + lstDatabase.Text + ';' +
			'Application Name=' + '{#SetupSetting("AppName")}' + ' Execute SQL;' ;     
		
		if chkWindowsAuth.Checked then
			ADOConnection.ConnectionString := ADOConnection.ConnectionString +
				'Integrated Security=SSPI;'
		else
			ADOConnection.ConnectionString := ADOConnection.ConnectionString +
			'User Id=' + txtUsername.Text + ';' +
			'Password=' + txtPassword.Text + ';';
		
		ADOConnection.Open;
		
		try
				ConnectionString := 'Server=' + txtServer.Text + ';Database=' + lstDatabase.Text + ';User Id=' + txtUsername.Text + ';Password=' + txtPassword.Text + ';';
				ChangeConnectionString(ConnectionString);
		finally
			ADOConnection.Close;
		end;
		except
			MsgBox(GetExceptionMessage, mbError, MB_OK);
			ExitProcess(5);
		end;  
end;

{ CustomForm_NextkButtonClick }
function CustomForm_NextButtonClick(Page: TWizardPage): Boolean;
var  
	ADOConnection: Variant;  
begin
	ADOConnection := CreateOleObject('ADODB.Connection');
	ADOConnection.ConnectionString := 
		'Provider=SQLOLEDB;' +
		'Data Source=' + txtServer.Text + ';' +
		'Initial Catalog=' + lstDatabase.Text + ';' +
		'Application Name=' + '{#SetupSetting("AppName")}' + ' Execute SQL;' ;
				 
	if chkWindowsAuth.Checked then
		ADOConnection.ConnectionString := ADOConnection.ConnectionString +
			'Integrated Security=SSPI;'
	else
		ADOConnection.ConnectionString := ADOConnection.ConnectionString +
			'User Id=' + txtUsername.Text + ';' +
			'Password=' + txtPassword.Text + ';';

	ADOConnection.Open;
	Result := True;
end;

{ CustomForm_CreatePage }
function CustomForm_CreatePage(PreviousPageId: Integer): Integer;
begin
	Page := CreateCustomPage(
		PreviousPageId,
		ExpandConstant('{cm:CustomForm_Caption}'),
		ExpandConstant('{cm:CustomForm_Description}')
	);

	{ lblVersion }
	lblVersion := TLabel.Create(Page);
	with lblVersion do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblVersion_Caption0}');
		Left := ScaleX(24);
		Top := ScaleY(8);
		Width := ScaleX(61);
		Height := ScaleY(13);
	end;

	{ lstVersion }
	lstVersion := TComboBox.Create(Page);
	with lstVersion do
	begin
		Parent := Page.Surface;
		Left := ScaleX(112);
		Top := ScaleY(8);
		Width := ScaleX(145);
		Height := ScaleY(21);
		Style := csDropDownList;
		DropDownCount := 3;
		TabOrder := 0;
		Items.Add(ExpandConstant('{cm:CustomForm_lstVersion_Line0}'));
		Items.Add(ExpandConstant('{cm:CustomForm_lstVersion_Line1}'));
		Items.Add(ExpandConstant('{cm:CustomForm_lstVersion_Line2}'));
		OnChange:= @VersionOnChange;
	end;

	{ lblServer }
	lblServer := TLabel.Create(Page);
	with lblServer do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblServer_Caption0}');
		Left := ScaleX(24);
		Top := ScaleY(32);
		Width := ScaleX(68);
		Height := ScaleY(13);
		Enabled := False;
	end;

	{ txtServer }
	txtServer := TEdit.Create(Page);
	with txtServer do
	begin
		Parent := Page.Surface;
		Left := ScaleX(112);
		Top := ScaleY(32);
		Width := ScaleX(273);
		Height := ScaleY(21);
		TabOrder := 1;
		Enabled := False;
		OnChange := @ServerOnChange;
	end;

	{ lblAuthType }
	lblAuthType := TLabel.Create(Page);
	with lblAuthType do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblAuthType_Caption0}');
		Left := ScaleX(24);
		Top := ScaleY(72);
		Width := ScaleX(87);
		Height := ScaleY(13);
		Enabled := False;
	end;

	{ chkWindowsAuth }
	chkWindowsAuth := TRadioButton.Create(Page);
	with chkWindowsAuth do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_chkWindowsAuth_Caption0}');
		Left := ScaleX(32);
		Top := ScaleY(88);
		Width := ScaleX(177);
		Height := ScaleY(17);
		Checked := True;
		TabOrder := 2;
		TabStop := True;
		OnClick := @AuthOnChange;
		Enabled := False;
	end;

	{ chkSQLAuth }
	chkSQLAuth := TRadioButton.Create(Page);
	with chkSQLAuth do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_chkSQLAuth_Caption0}');
		Left := ScaleX(32);
		Top := ScaleY(108);
		Width := ScaleX(185);
		Height := ScaleY(17);
		TabOrder := 3;
		OnClick := @AuthOnChange;
		Enabled := False;
	end;

	{ lblUser }
	lblUser := TLabel.Create(Page);
	with lblUser do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblUser_Caption0}');
		Left := ScaleX(56);
		Top := ScaleY(128);
		Width := ScaleX(58);
		Height := ScaleY(13);
		Enabled := False;
	end;

	{ lblPassword }
	lblPassword := TLabel.Create(Page);
	with lblPassword do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblPassword_Caption0}');
		Left := ScaleX(56);
		Top := ScaleY(152);
		Width := ScaleX(53);
		Height := ScaleY(13);
		Enabled := False;
	end;

	{ txtUsername }
	txtUsername := TEdit.Create(Page);
	with txtUsername do
	begin
		Parent := Page.Surface;
		Left := ScaleX(120);
		Top := ScaleY(128);
		Width := ScaleX(241);
		Height := ScaleY(21);
		Enabled := False;
		TabOrder := 4;
	end;

	{ txtPassword }
	txtPassword := TPasswordEdit.Create(Page);
	with txtPassword do
	begin
		Parent := Page.Surface;
		Left := ScaleX(120);
		Top := ScaleY(152);
		Width := ScaleX(241);
		Height := ScaleY(21);
		Enabled := False;
		TabOrder := 5;
	end;

	{ lblDatabase }
	lblDatabase := TLabel.Create(Page);
	with lblDatabase do
	begin
		Parent := Page.Surface;
		Caption := ExpandConstant('{cm:CustomForm_lblDatabase_Caption0}');
		Left := ScaleX(56);
		Top := ScaleY(192);
		Width := ScaleX(53);
		Height := ScaleY(13);
		Enabled := False;
	end;

	{ lstDatabase }
	lstDatabase := TComboBox.Create(Page);
	with lstDatabase do
	begin
		Parent := Page.Surface;
		Left := ScaleX(120);
		Top := ScaleY(192);
		Width := ScaleX(145);
		Height := ScaleY(21);
		Enabled := False;
		TabOrder := 6;    
		OnDropDown:= @RetrieveDatabaseList;
		OnChange:= @DatabaseOnChange;
	end;

	with Page do
	begin
		OnNextButtonClick := @CustomForm_NextButtonClick;
	end;

	Result := Page.ID;
end;

function GetDLLPath(IsUninstalling: boolean): string;
var ValueName: string;
begin
    if IsUninstalling then begin
		   RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\'	+ ADDON_ID, 'DLLInstallDir', ValueName);
			 Result := ValueName;
		end
		else
			 Result:=Copy(ParamStr(2), 0, Length(ParamStr(2))-Pos('|', ParamStr(2)));  		
end;	

function GetDefaultAddOnDir(param: String): string;
begin
  Result := Copy(ParamStr(2), 1, Pos('|', ParamStr(2))-1);
end;

procedure RegisterAddOnInfo();
begin
  RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID, 'InstallDir', 'NMS');
  RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID, 'DLLInstallDir', GetDLLPath(false));
end;

procedure UnregisterAddOnInfo();
begin
  RegDeleteValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID, 'InstallDir');
  RegDeleteValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID, 'DLLInstallDir');
  RegDeleteKeyIfEmpty(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID);
end;
 
function GetAddOnInstalledPath(): string;
var ValueName: string;
begin
  RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\' + PARTNER_ID + '\' + ADDON_ID, 'InstallDir', ValueName);
  Result := ValueName;
end;

function InitializeSetup(): boolean;
var ResultCode: integer;
begin
  if ParamStr(2) = '/u' then begin
		ExtractTemporaryFile('Vista.cjstyles');
		LoadSkin(ExpandConstant('{tmp}\Vista.cjstyles'), '');
    SetCurrentDir(GetDLLPath(true));
    Exec(GetAddOnInstalledPath + '\unins000.exe', '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)
    Result := false;
  end
  else begin
      ExtractTemporaryFile('Vista.cjstyles');
			LoadSkin(ExpandConstant('{tmp}\Vista.cjstyles'), '');
			SetCurrentDir(GetDLLPath(false));
      Result := true;
  end;
end;

procedure InitializeWizard();
begin
	if Framework45IsNotInstalled() then
	begin
	    idpAddFile('http://go.microsoft.com/fwlink/?LinkId=397707', ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
			idpDownloadAfter(wpReady);
	end;
	bIsNextEnabled := False;
	CustomForm_CreatePage(wpLicense);
end;

procedure InstallFramework;
var
	StatusText: string;
	ResultCode: Integer;
begin
	StatusText := WizardForm.StatusLabel.Caption;
	WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.5.2. This might take a few minutes...';
	WizardForm.ProgressGauge.Style := npbstMarquee;
	try
		if not Exec(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
		begin
			MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.', mbError, MB_OK);
		end;
	finally
		WizardForm.StatusLabel.Caption := StatusText;
		WizardForm.ProgressGauge.Style := npbstNormal;
		
	DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
	end;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
    if CurPageID = Page.ID then
			WizardForm.NextButton.Enabled 
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then begin
		if Framework45IsNotInstalled() then
		begin
			InstallFramework();
		end;
    RegisterAddOnInfo();
    SetAddOnFolder(ExpandConstant('{app}'));
    EndInstallEx(ExpandConstant('{app}'), true);
  end;
	
	//if CurStep = ssInstall then
	//begin
	//	DeploySQL();
	//end;
end;

procedure DeinitializeSetup();
begin
		ShowWindow(StrToInt(ExpandConstant('{wizardhwnd}')), 0);
		UnloadSkin();
    EndInstallEx('', false);
    UnloadDLL('C:\Source\DeSangosse\CVA.View.Comissionamento\SETUP\MEF\AddOnInstallAPI.dll');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usPostUninstall then begin
    UnregisterAddOnInfo();
    EndUninstall(ExpandConstant('{app}'), true);
  end;
end;

procedure DeinitializeUninstall();
begin
  UnloadDLL('C:\Source\DeSangosse\CVA.View.Comissionamento\SETUP\MEF\AddOnInstallAPI.dll');
end;
