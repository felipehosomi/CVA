<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Anexo_GetId" xml:space="preserve">
    <value>SELECT AbsEntry FROM ATC1 WITH(NOLOCK)
WHERE (CAST(trgtPath AS NVARCHAR(MAX)) = '{0}' AND CAST(FileName AS NVARCHAR(MAX)) = '{2}' AND FileExt = '{3}')
OR (CAST(srcPath AS NVARCHAR(MAX)) = '{1}' AND CAST(FileName AS NVARCHAR(MAX)) = '{2}' AND FileExt = '{3}')</value>
  </data>
  <data name="ImpPedido_Get" xml:space="preserve">
    <value>SELECT 
	ROW_NUMBER() OVER(ORDER BY PED1.U_LINHA ASC) AS [Row],
	PED.Code,
	'Y'				#,
	PED.U_ARQUIVO	[Arquivo],
	PED1.U_LINHA	[Linha],
	PED1.U_EMPRESA	[Empresa],
	PED1.U_BASE		[Base],
	CASE PED1.U_Status
		WHEN 1 THEN 'Pedido gerado'
		WHEN 2 THEN 'Erro ao gerar pedido'
		WHEN 3 THEN 'NF Gerada'
		WHEN 4 THEN 'Erro ao gerar NF'
		WHEN 5 THEN 'Pedido cancelado'
		WHEN 6 THEN 'Erro ao cancelar pedido'
		WHEN 7 THEN 'NF cancelada'
		WHEN 8 THEN 'Erro ao cancelar NF'
	END				[Status],
	PED1.U_NUMSAP	[Pedido],
	PED1.U_PN		[Cód. PN],
	PED1.U_ITEM		[Cód. Item],
	PED1.U_QTD		[Qtde.],
	PED1.U_VALOR	[Valor],
	PED1.U_LOG		[Log]
FROM [@CVA_IMP_PED] PED WITH(NOLOCK)
	INNER JOIN  [@CVA_IMP_PED1] PED1 WITH(NOLOCK)
		ON PED1.Code = PED.Code</value>
  </data>
  <data name="ImpPedido_GetByBase" xml:space="preserve">
    <value>SELECT 
	PED.Code,
	CASE WHEN OPOR.DocStatus = 'O'
		THEN 'Y'
		ELSE 'N'
	END #,
	PED.U_ARQUIVO	[Arquivo],
	PED1.U_LINHA	[Linha],
	PED1.U_EMPRESA	[Empresa],
	PED1.U_BASE		[Base],
	CASE WHEN OPOR.DocStatus = 'O'
		THEN 'Pedido gerado'
		ELSE CASE WHEN OPOR.CANCELED = 'Y'
			THEN 'Pedido cancelado'
			ELSE CASE WHEN OPOR.InvntSttus = 'O'
				THEN 'Pedido fechado'
				ELSE 'NF Gerada'
			END
		END
	END [Status],
	--CASE PED1.U_Status
		-- WHEN 1 THEN 'Pedido gerado'
		-- WHEN 2 THEN 'Erro ao gerar pedido'
		-- WHEN 3 THEN 'NF Gerada'
		-- WHEN 4 THEN 'Erro ao gerar NF'
		-- WHEN 5 THEN 'Pedido cancelado'
		-- WHEN 6 THEN 'Erro ao cancelar pedido'
		-- WHEN 7 THEN 'NF cancelada'
		-- WHEN 8 THEN 'Erro ao cancelar NF'
	--END				[Status],
	PED1.U_NUMSAP	[Pedido],
    U_DATA [Data Importação],
    OPOR.TaxDate    [Data Do Documento],
    OPOR.DocDate    [Data Do Lançamento],
	PED1.U_PN		[Cód. PN],
	PED1.U_ITEM		[Cód. Item],
	PED1.U_QTD		[Qtde.],
	PED1.U_VALOR	[Valor],
	PED1.U_LOG		[Log]
FROM [@CVA_IMP_PED] PED WITH(NOLOCK)
	INNER JOIN  [@CVA_IMP_PED1] PED1 WITH(NOLOCK)
		ON PED1.Code = PED.Code 
	INNER JOIN [{0}].[dbo].[OPOR] OPOR WITH(NOLOCK)
		ON OPOR.DocEntry = PED1.U_NUMSAP AND PED1.U_BASE = '{0}'
WHERE PED1.U_STATUS IN (1, 4, 6)</value>
  </data>
  <data name="ImpPedido_Update" xml:space="preserve">
    <value>UPDATE [@CVA_IMP_PED1]
SET U_Status = {0},
U_LOG = '{1}'
WHERE Code = '{2}' AND LineId = {3}</value>
  </data>
</root>