<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Check_DespesaFrete" xml:space="preserve">
    <value>IF ('{0}' = 'P')
BEGIN
IF((SELECT COUNT(DOCENTRY) FROM RDR3 WHERE ExpnsCode = {1} AND DocEntry = {2}) &gt; 0)
	BEGIN
		SELECT 1
	END
ELSE
	BEGIN
		SELECT 0
	END
END

IF ('{0}' = 'C')
BEGIN
IF((SELECT COUNT(DOCENTRY) FROM QUT3 WHERE ExpnsCode = {1} AND DocEntry = {2}) &gt; 0)
	BEGIN
		SELECT 1
	END
ELSE
	BEGIN
		SELECT 0
	END
END</value>
    <comment>Verifica se o documento possuí o tipo de despesa "Frete"</comment>
  </data>
  <data name="Check_TipoEnvio" xml:space="preserve">
    <value>SELECT TrnspName FROM OSHP WHERE TrnspCode = {0}</value>
    <comment>Retorna o Tipo de Envio do pedido</comment>
  </data>
  <data name="Check_UserPermission" xml:space="preserve">
    <value>SELECT COUNT(NAME) FROM [@USUARIOS_MESTRE] WHERE NAME ='{0}'</value>
    <comment>Verifica se o usuário tem permissão para zerar o frete</comment>
  </data>
  <data name="Get_IdDespesa" xml:space="preserve">
    <value>SELECT ExpnsCode FROM OEXD WHERE ExpnsName = 'Frete'</value>
    <comment>Retorna o ID da despesa adicional "Frete"</comment>
  </data>
  <data name="Get_RegraFrete" xml:space="preserve">
    <value>SELECT TOP(1) U_PORCENTAGEM, U_QUANTIDADE 
	FROM [@REGRA_FRETE]

	WHERE U_UF = (SELECT DISTINCT STATE FROM CRD1 WHERE CARDCODE = '{0}')
	AND U_PRODUTO = '{1}'
	AND U_QUANTIDADE &lt;= {2}

	ORDER BY U_QUANTIDADE DESC</value>
    <comment>Retorna a porcentagem para calculo do frete</comment>
  </data>
  <data name="Tax_GetIPIRate" xml:space="preserve">
    <value>SELECT STA1.Rate
FROM OSTC WITH(NOLOCK)
	INNER JOIN STC1 WITH(NOLOCK)
		ON STC1.STCCode = OSTC.Code
	INNER JOIN STA1 WITH(NOLOCK)
		ON STA1.StaCode = STC1.STACode
	INNER JOIN OSTT WITH(NOLOCK)
		ON OSTT.AbsId = STA1.SttType
		AND OSTT.Name LIKE '%IPI%'
		AND STA1.Rate &gt; 0
WHERE OSTC.Code = '{0}'</value>
    <comment>Retorna alíquota do IPI de acordo com o imposto</comment>
  </data>
</root>